
V1
	// void	*routine(void *arg)
	// {
	// 	t_philo *philo = (t_philo *)arg;
	// 	struct timeval start;
	// 	struct timeval end;

	// 	gettimeofday(&start, NULL);
	// 	start.tv_usec = philo->start_eat;

	// 	while (!philo->data->dead)
	// 	{
	// 		printf("START %ld \n", start.tv_usec);
	// 		pthread_mutex_lock(philo->r_fork);
	// 		printf("%ld %d has taken a fork\n", start.tv_usec, philo->id_philo);
	// 		philo->start_eat = start.tv_usec;
	// 		if (philo->data->nb_philo == 1)
	// 		{
	// 			philo->philo_status = DEAD;
	// 			philo->data->dead = TRUE;
	// 			end.tv_usec = start.tv_usec + philo->data->time_to_die;
	// 			break ;
	// 		}
	// 		// Prendre la fourchette à gauche
	// 		pthread_mutex_lock(philo->l_fork);
	// 		end.tv_usec = start.tv_usec + philo->data->time_to_eat;
	// 		if (end.tv_usec - start.tv_usec > philo->data->time_to_die)
	// 		{
	// 			philo->philo_status = DEAD;
	// 			philo->data->dead = TRUE;
	// 			break ;
	// 		}
	// 		philo->philo_status = EATING;
	// 		philo->nb_eats++;
	// 		philo->last_meal = end.tv_usec;
	// 		printf("%ld %d is eating\n", start.tv_usec, philo->id_philo);

	// 		pthread_mutex_unlock(philo->l_fork);
	// 		pthread_mutex_unlock(philo->r_fork);

	// 		// Dormir
	// 		philo->philo_status = SLEEPING;
	// 		printf("%ld %d is sleeping\n", end.tv_usec, philo->id_philo);
	// 		usleep(philo->data->time_to_sleep);
	// 		// Pensée

	// 		philo->philo_status = THINKING;
	// 		printf("%ld %d is thinking\n", (end.tv_usec
	// 					+ philo->data->time_to_sleep), philo->id_philo);
	// 		if (philo->nb_eats == philo->data->nb_meals)
	// 			break ;
	// 	}
	// 	if (philo->data->dead)
	// 	{
	// 		usleep(10);
	// 		end.tv_usec = start.tv_usec + philo->data->time_to_die;
	// 		printf("%ld %d died\n", end.tv_usec, philo->id_philo);
	// 	}
	// 	return (NULL);
	// }

	V2 THIBAUT

		t_bool
		philo_dead(t_philo *philo)
{
	philo->philo_status = DEAD;
	philo->data->dead = TRUE;
	if (philo->nb_forks > 0)
	{
		try_unlock(philo->l_fork);
		if (philo->nb_forks > 1)
			try_unlock(philo->r_fork);
		printf("%s %ld %d died\n", C_DEAD, ft_time() - philo->data->start_meal,
				philo->id_philo);
	}
	return (TRUE);
}
void	philo_alone(t_data *data, t_philo *philo)
{
	philo->philo_status = DEAD;
	philo->data->dead = TRUE;
	try_lock(philo->l_fork);
	// try_lock(data->str_message); // TODO PB SEGFAULT SI ACTIVÉ
	printf("%s %ld %d has taken a fork\n", C_EAT, ft_time() - data->start_meal,
			philo->id_philo);
	printf("%s %ld %d died\n", C_DEAD, data->time_to_die, philo->id_philo);
	try_unlock(philo->l_fork);
	// try_unlock(data->str_message);
}

t_bool	fn_eating(t_philo *philo, t_data *data)
{
	while (1)
	{
		if (data->dead)
			return (philo_dead(philo));
		else if (philo->philo_status == EATING)
		{
			try_lock(philo->l_fork);
			philo->nb_forks++;
			if (data->dead)
				return (philo_dead(philo));
			printf("%s %ld %d has taken a fork\n", C_EAT, ft_time()
					- data->start_meal, philo->id_philo);
			try_lock(philo->r_fork);
			philo->nb_forks++;
			if (data->dead)
				return (philo_dead(philo));
			printf("%s %ld %d has taken a fork\n", C_EAT, ft_time()
					- data->start_meal, philo->id_philo);
			if (ft_time() - philo->last_meal >= data->time_to_die)
				return (philo_dead(philo));
			printf("%s %ld %d is eating\n", C_EAT, ft_time() - data->start_meal,
					philo->id_philo);
		}
	}
	printf("%ld %d is fn_eating\n", ft_time() - data->start_meal,
			philo->id_philo);
	return (FALSE);
}

t_bool	fn_sleeping(t_philo *philo, t_data *data)
{
	printf("%ld %d is sleeping\n", ft_time() - data->start_meal,
			philo->id_philo);
	return (FALSE);
}

t_bool	fn_thinking(t_philo *philo, t_data *data)
{
	printf("%ld %d is thinking\n", ft_time() - data->start_meal,
			philo->id_philo);
	return (FALSE);
}
void	*routine(void *arg)
{
	t_philo *philo;
	t_data *data;

	philo = (t_philo *)arg;
	data = philo->data;
	while (ft_time() < data->start_meal)
		continue ;
	if (data->nb_philo == 1)
	{
		philo_alone(data, philo);
		return (NULL);
	}
	else
	{
		while (data->dead == FALSE)
		{
			if (philo->philo_status == DEAD)
				break ;
			else if (philo->philo_status == EATING && fn_eating(philo, data))
				break ;
			else if (philo->philo_status == SLEEPING && fn_sleeping(philo,
						data))
				break ;
			else if (philo->philo_status == THINKING && fn_thinking(philo,
						data))
				break ;
		}
	}
	// unlock_forks(philo);
	return (NULL);
}